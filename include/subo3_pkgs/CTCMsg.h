// Generated by gencpp from file subo3_pkgs/CTCMsg.msg
// DO NOT EDIT!


#ifndef SUBO3_PKGS_MESSAGE_CTCMSG_H
#define SUBO3_PKGS_MESSAGE_CTCMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace subo3_pkgs
{
template <class ContainerAllocator>
struct CTCMsg_
{
  typedef CTCMsg_<ContainerAllocator> Type;

  CTCMsg_()
    : TF(0)
    , stp_time(0.0)
    , L_Des_X_x(0.0)
    , L_Des_X_y(0.0)
    , L_Des_X_z(0.0)
    , L_Des_X_rll(0.0)
    , L_Des_X_pit(0.0)
    , L_Des_X_yaw(0.0)
    , L_Des_XDot_x(0.0)
    , L_Des_XDot_y(0.0)
    , L_Des_XDot_z(0.0)
    , L_Des_XDot_rll(0.0)
    , L_Des_XDot_pit(0.0)
    , L_Des_XDot_yaw(0.0)
    , L_Des_XDDot_x(0.0)
    , L_Des_XDDot_y(0.0)
    , L_Des_XDDot_z(0.0)
    , L_Des_XDDot_rll(0.0)
    , L_Des_XDDot_pit(0.0)
    , L_Des_XDDot_yaw(0.0)
    , R_Des_X_x(0.0)
    , R_Des_X_y(0.0)
    , R_Des_X_z(0.0)
    , R_Des_X_rll(0.0)
    , R_Des_X_pit(0.0)
    , R_Des_X_yaw(0.0)
    , R_Des_XDot_x(0.0)
    , R_Des_XDot_y(0.0)
    , R_Des_XDot_z(0.0)
    , R_Des_XDot_rll(0.0)
    , R_Des_XDot_pit(0.0)
    , R_Des_XDot_yaw(0.0)
    , R_Des_XDDot_x(0.0)
    , R_Des_XDDot_y(0.0)
    , R_Des_XDDot_z(0.0)
    , R_Des_XDDot_rll(0.0)
    , R_Des_XDDot_pit(0.0)
    , R_Des_XDDot_yaw(0.0)
    , Kp0(0.0)
    , Kp1(0.0)
    , Kp2(0.0)
    , Kp3(0.0)
    , Kp4(0.0)
    , Kp5(0.0)
    , Kv0(0.0)
    , Kv1(0.0)
    , Kv2(0.0)
    , Kv3(0.0)
    , Kv4(0.0)
    , Kv5(0.0)  {
    }
  CTCMsg_(const ContainerAllocator& _alloc)
    : TF(0)
    , stp_time(0.0)
    , L_Des_X_x(0.0)
    , L_Des_X_y(0.0)
    , L_Des_X_z(0.0)
    , L_Des_X_rll(0.0)
    , L_Des_X_pit(0.0)
    , L_Des_X_yaw(0.0)
    , L_Des_XDot_x(0.0)
    , L_Des_XDot_y(0.0)
    , L_Des_XDot_z(0.0)
    , L_Des_XDot_rll(0.0)
    , L_Des_XDot_pit(0.0)
    , L_Des_XDot_yaw(0.0)
    , L_Des_XDDot_x(0.0)
    , L_Des_XDDot_y(0.0)
    , L_Des_XDDot_z(0.0)
    , L_Des_XDDot_rll(0.0)
    , L_Des_XDDot_pit(0.0)
    , L_Des_XDDot_yaw(0.0)
    , R_Des_X_x(0.0)
    , R_Des_X_y(0.0)
    , R_Des_X_z(0.0)
    , R_Des_X_rll(0.0)
    , R_Des_X_pit(0.0)
    , R_Des_X_yaw(0.0)
    , R_Des_XDot_x(0.0)
    , R_Des_XDot_y(0.0)
    , R_Des_XDot_z(0.0)
    , R_Des_XDot_rll(0.0)
    , R_Des_XDot_pit(0.0)
    , R_Des_XDot_yaw(0.0)
    , R_Des_XDDot_x(0.0)
    , R_Des_XDDot_y(0.0)
    , R_Des_XDDot_z(0.0)
    , R_Des_XDDot_rll(0.0)
    , R_Des_XDDot_pit(0.0)
    , R_Des_XDDot_yaw(0.0)
    , Kp0(0.0)
    , Kp1(0.0)
    , Kp2(0.0)
    , Kp3(0.0)
    , Kp4(0.0)
    , Kp5(0.0)
    , Kv0(0.0)
    , Kv1(0.0)
    , Kv2(0.0)
    , Kv3(0.0)
    , Kv4(0.0)
    , Kv5(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _TF_type;
  _TF_type TF;

   typedef float _stp_time_type;
  _stp_time_type stp_time;

   typedef float _L_Des_X_x_type;
  _L_Des_X_x_type L_Des_X_x;

   typedef float _L_Des_X_y_type;
  _L_Des_X_y_type L_Des_X_y;

   typedef float _L_Des_X_z_type;
  _L_Des_X_z_type L_Des_X_z;

   typedef float _L_Des_X_rll_type;
  _L_Des_X_rll_type L_Des_X_rll;

   typedef float _L_Des_X_pit_type;
  _L_Des_X_pit_type L_Des_X_pit;

   typedef float _L_Des_X_yaw_type;
  _L_Des_X_yaw_type L_Des_X_yaw;

   typedef float _L_Des_XDot_x_type;
  _L_Des_XDot_x_type L_Des_XDot_x;

   typedef float _L_Des_XDot_y_type;
  _L_Des_XDot_y_type L_Des_XDot_y;

   typedef float _L_Des_XDot_z_type;
  _L_Des_XDot_z_type L_Des_XDot_z;

   typedef float _L_Des_XDot_rll_type;
  _L_Des_XDot_rll_type L_Des_XDot_rll;

   typedef float _L_Des_XDot_pit_type;
  _L_Des_XDot_pit_type L_Des_XDot_pit;

   typedef float _L_Des_XDot_yaw_type;
  _L_Des_XDot_yaw_type L_Des_XDot_yaw;

   typedef float _L_Des_XDDot_x_type;
  _L_Des_XDDot_x_type L_Des_XDDot_x;

   typedef float _L_Des_XDDot_y_type;
  _L_Des_XDDot_y_type L_Des_XDDot_y;

   typedef float _L_Des_XDDot_z_type;
  _L_Des_XDDot_z_type L_Des_XDDot_z;

   typedef float _L_Des_XDDot_rll_type;
  _L_Des_XDDot_rll_type L_Des_XDDot_rll;

   typedef float _L_Des_XDDot_pit_type;
  _L_Des_XDDot_pit_type L_Des_XDDot_pit;

   typedef float _L_Des_XDDot_yaw_type;
  _L_Des_XDDot_yaw_type L_Des_XDDot_yaw;

   typedef float _R_Des_X_x_type;
  _R_Des_X_x_type R_Des_X_x;

   typedef float _R_Des_X_y_type;
  _R_Des_X_y_type R_Des_X_y;

   typedef float _R_Des_X_z_type;
  _R_Des_X_z_type R_Des_X_z;

   typedef float _R_Des_X_rll_type;
  _R_Des_X_rll_type R_Des_X_rll;

   typedef float _R_Des_X_pit_type;
  _R_Des_X_pit_type R_Des_X_pit;

   typedef float _R_Des_X_yaw_type;
  _R_Des_X_yaw_type R_Des_X_yaw;

   typedef float _R_Des_XDot_x_type;
  _R_Des_XDot_x_type R_Des_XDot_x;

   typedef float _R_Des_XDot_y_type;
  _R_Des_XDot_y_type R_Des_XDot_y;

   typedef float _R_Des_XDot_z_type;
  _R_Des_XDot_z_type R_Des_XDot_z;

   typedef float _R_Des_XDot_rll_type;
  _R_Des_XDot_rll_type R_Des_XDot_rll;

   typedef float _R_Des_XDot_pit_type;
  _R_Des_XDot_pit_type R_Des_XDot_pit;

   typedef float _R_Des_XDot_yaw_type;
  _R_Des_XDot_yaw_type R_Des_XDot_yaw;

   typedef float _R_Des_XDDot_x_type;
  _R_Des_XDDot_x_type R_Des_XDDot_x;

   typedef float _R_Des_XDDot_y_type;
  _R_Des_XDDot_y_type R_Des_XDDot_y;

   typedef float _R_Des_XDDot_z_type;
  _R_Des_XDDot_z_type R_Des_XDDot_z;

   typedef float _R_Des_XDDot_rll_type;
  _R_Des_XDDot_rll_type R_Des_XDDot_rll;

   typedef float _R_Des_XDDot_pit_type;
  _R_Des_XDDot_pit_type R_Des_XDDot_pit;

   typedef float _R_Des_XDDot_yaw_type;
  _R_Des_XDDot_yaw_type R_Des_XDDot_yaw;

   typedef float _Kp0_type;
  _Kp0_type Kp0;

   typedef float _Kp1_type;
  _Kp1_type Kp1;

   typedef float _Kp2_type;
  _Kp2_type Kp2;

   typedef float _Kp3_type;
  _Kp3_type Kp3;

   typedef float _Kp4_type;
  _Kp4_type Kp4;

   typedef float _Kp5_type;
  _Kp5_type Kp5;

   typedef float _Kv0_type;
  _Kv0_type Kv0;

   typedef float _Kv1_type;
  _Kv1_type Kv1;

   typedef float _Kv2_type;
  _Kv2_type Kv2;

   typedef float _Kv3_type;
  _Kv3_type Kv3;

   typedef float _Kv4_type;
  _Kv4_type Kv4;

   typedef float _Kv5_type;
  _Kv5_type Kv5;





  typedef boost::shared_ptr< ::subo3_pkgs::CTCMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::subo3_pkgs::CTCMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CTCMsg_

typedef ::subo3_pkgs::CTCMsg_<std::allocator<void> > CTCMsg;

typedef boost::shared_ptr< ::subo3_pkgs::CTCMsg > CTCMsgPtr;
typedef boost::shared_ptr< ::subo3_pkgs::CTCMsg const> CTCMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::subo3_pkgs::CTCMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace subo3_pkgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'subo3_pkgs': ['/home/jiyong/catkin_ws/src/subo3_pkgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::subo3_pkgs::CTCMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::subo3_pkgs::CTCMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::subo3_pkgs::CTCMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3b215d61ec01fd4542c4d3691c8fe78";
  }

  static const char* value(const ::subo3_pkgs::CTCMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3b215d61ec01fd4ULL;
  static const uint64_t static_value2 = 0x542c4d3691c8fe78ULL;
};

template<class ContainerAllocator>
struct DataType< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "subo3_pkgs/CTCMsg";
  }

  static const char* value(const ::subo3_pkgs::CTCMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 TF\n\
float32 stp_time\n\
float32 L_Des_X_x\n\
float32 L_Des_X_y\n\
float32 L_Des_X_z\n\
float32 L_Des_X_rll\n\
float32 L_Des_X_pit\n\
float32 L_Des_X_yaw\n\
float32 L_Des_XDot_x\n\
float32 L_Des_XDot_y\n\
float32 L_Des_XDot_z\n\
float32 L_Des_XDot_rll\n\
float32 L_Des_XDot_pit\n\
float32 L_Des_XDot_yaw\n\
float32 L_Des_XDDot_x\n\
float32 L_Des_XDDot_y\n\
float32 L_Des_XDDot_z\n\
float32 L_Des_XDDot_rll\n\
float32 L_Des_XDDot_pit\n\
float32 L_Des_XDDot_yaw\n\
float32 R_Des_X_x\n\
float32 R_Des_X_y\n\
float32 R_Des_X_z\n\
float32 R_Des_X_rll\n\
float32 R_Des_X_pit\n\
float32 R_Des_X_yaw\n\
float32 R_Des_XDot_x\n\
float32 R_Des_XDot_y\n\
float32 R_Des_XDot_z\n\
float32 R_Des_XDot_rll\n\
float32 R_Des_XDot_pit\n\
float32 R_Des_XDot_yaw\n\
float32 R_Des_XDDot_x\n\
float32 R_Des_XDDot_y\n\
float32 R_Des_XDDot_z\n\
float32 R_Des_XDDot_rll\n\
float32 R_Des_XDDot_pit\n\
float32 R_Des_XDDot_yaw\n\
float32 Kp0\n\
float32 Kp1\n\
float32 Kp2\n\
float32 Kp3\n\
float32 Kp4\n\
float32 Kp5\n\
float32 Kv0\n\
float32 Kv1\n\
float32 Kv2\n\
float32 Kv3\n\
float32 Kv4\n\
float32 Kv5\n\
";
  }

  static const char* value(const ::subo3_pkgs::CTCMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.TF);
      stream.next(m.stp_time);
      stream.next(m.L_Des_X_x);
      stream.next(m.L_Des_X_y);
      stream.next(m.L_Des_X_z);
      stream.next(m.L_Des_X_rll);
      stream.next(m.L_Des_X_pit);
      stream.next(m.L_Des_X_yaw);
      stream.next(m.L_Des_XDot_x);
      stream.next(m.L_Des_XDot_y);
      stream.next(m.L_Des_XDot_z);
      stream.next(m.L_Des_XDot_rll);
      stream.next(m.L_Des_XDot_pit);
      stream.next(m.L_Des_XDot_yaw);
      stream.next(m.L_Des_XDDot_x);
      stream.next(m.L_Des_XDDot_y);
      stream.next(m.L_Des_XDDot_z);
      stream.next(m.L_Des_XDDot_rll);
      stream.next(m.L_Des_XDDot_pit);
      stream.next(m.L_Des_XDDot_yaw);
      stream.next(m.R_Des_X_x);
      stream.next(m.R_Des_X_y);
      stream.next(m.R_Des_X_z);
      stream.next(m.R_Des_X_rll);
      stream.next(m.R_Des_X_pit);
      stream.next(m.R_Des_X_yaw);
      stream.next(m.R_Des_XDot_x);
      stream.next(m.R_Des_XDot_y);
      stream.next(m.R_Des_XDot_z);
      stream.next(m.R_Des_XDot_rll);
      stream.next(m.R_Des_XDot_pit);
      stream.next(m.R_Des_XDot_yaw);
      stream.next(m.R_Des_XDDot_x);
      stream.next(m.R_Des_XDDot_y);
      stream.next(m.R_Des_XDDot_z);
      stream.next(m.R_Des_XDDot_rll);
      stream.next(m.R_Des_XDDot_pit);
      stream.next(m.R_Des_XDDot_yaw);
      stream.next(m.Kp0);
      stream.next(m.Kp1);
      stream.next(m.Kp2);
      stream.next(m.Kp3);
      stream.next(m.Kp4);
      stream.next(m.Kp5);
      stream.next(m.Kv0);
      stream.next(m.Kv1);
      stream.next(m.Kv2);
      stream.next(m.Kv3);
      stream.next(m.Kv4);
      stream.next(m.Kv5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CTCMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::subo3_pkgs::CTCMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::subo3_pkgs::CTCMsg_<ContainerAllocator>& v)
  {
    s << indent << "TF: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TF);
    s << indent << "stp_time: ";
    Printer<float>::stream(s, indent + "  ", v.stp_time);
    s << indent << "L_Des_X_x: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_X_x);
    s << indent << "L_Des_X_y: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_X_y);
    s << indent << "L_Des_X_z: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_X_z);
    s << indent << "L_Des_X_rll: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_X_rll);
    s << indent << "L_Des_X_pit: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_X_pit);
    s << indent << "L_Des_X_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_X_yaw);
    s << indent << "L_Des_XDot_x: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDot_x);
    s << indent << "L_Des_XDot_y: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDot_y);
    s << indent << "L_Des_XDot_z: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDot_z);
    s << indent << "L_Des_XDot_rll: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDot_rll);
    s << indent << "L_Des_XDot_pit: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDot_pit);
    s << indent << "L_Des_XDot_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDot_yaw);
    s << indent << "L_Des_XDDot_x: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDDot_x);
    s << indent << "L_Des_XDDot_y: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDDot_y);
    s << indent << "L_Des_XDDot_z: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDDot_z);
    s << indent << "L_Des_XDDot_rll: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDDot_rll);
    s << indent << "L_Des_XDDot_pit: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDDot_pit);
    s << indent << "L_Des_XDDot_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.L_Des_XDDot_yaw);
    s << indent << "R_Des_X_x: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_X_x);
    s << indent << "R_Des_X_y: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_X_y);
    s << indent << "R_Des_X_z: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_X_z);
    s << indent << "R_Des_X_rll: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_X_rll);
    s << indent << "R_Des_X_pit: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_X_pit);
    s << indent << "R_Des_X_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_X_yaw);
    s << indent << "R_Des_XDot_x: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDot_x);
    s << indent << "R_Des_XDot_y: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDot_y);
    s << indent << "R_Des_XDot_z: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDot_z);
    s << indent << "R_Des_XDot_rll: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDot_rll);
    s << indent << "R_Des_XDot_pit: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDot_pit);
    s << indent << "R_Des_XDot_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDot_yaw);
    s << indent << "R_Des_XDDot_x: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDDot_x);
    s << indent << "R_Des_XDDot_y: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDDot_y);
    s << indent << "R_Des_XDDot_z: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDDot_z);
    s << indent << "R_Des_XDDot_rll: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDDot_rll);
    s << indent << "R_Des_XDDot_pit: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDDot_pit);
    s << indent << "R_Des_XDDot_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.R_Des_XDDot_yaw);
    s << indent << "Kp0: ";
    Printer<float>::stream(s, indent + "  ", v.Kp0);
    s << indent << "Kp1: ";
    Printer<float>::stream(s, indent + "  ", v.Kp1);
    s << indent << "Kp2: ";
    Printer<float>::stream(s, indent + "  ", v.Kp2);
    s << indent << "Kp3: ";
    Printer<float>::stream(s, indent + "  ", v.Kp3);
    s << indent << "Kp4: ";
    Printer<float>::stream(s, indent + "  ", v.Kp4);
    s << indent << "Kp5: ";
    Printer<float>::stream(s, indent + "  ", v.Kp5);
    s << indent << "Kv0: ";
    Printer<float>::stream(s, indent + "  ", v.Kv0);
    s << indent << "Kv1: ";
    Printer<float>::stream(s, indent + "  ", v.Kv1);
    s << indent << "Kv2: ";
    Printer<float>::stream(s, indent + "  ", v.Kv2);
    s << indent << "Kv3: ";
    Printer<float>::stream(s, indent + "  ", v.Kv3);
    s << indent << "Kv4: ";
    Printer<float>::stream(s, indent + "  ", v.Kv4);
    s << indent << "Kv5: ";
    Printer<float>::stream(s, indent + "  ", v.Kv5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SUBO3_PKGS_MESSAGE_CTCMSG_H
